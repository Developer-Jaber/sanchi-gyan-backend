generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Role {
  id    Int    @id @default(autoincrement())
  name  String @unique // Student | Teacher | Admin
  users User[]
}

model User {
  id               Int       @id @default(autoincrement())
  email            String    @unique
  passwordHash     String?
  name             String?
  googleId         String?   @unique
  roleId           Int
  role             Role      @relation(fields: [roleId], references: [id])
  isEmailVerified  Boolean   @default(false)
  createdAt        DateTime  @default(now())
  updatedAt        DateTime  @updatedAt
  deletedAt        DateTime?

  verificationTokens  EmailVerificationToken[]
  passwordResetTokens PasswordResetToken[]
  refreshTokens       RefreshToken[]
  courses             Course[]        @relation("CourseCreator")
  enrollments         Enrollment[]
  videoProgress       VideoProgress[]
  jobApplications     JobApplication[]

  @@index([email])
}

model EmailVerificationToken {
  id        Int      @id @default(autoincrement())
  userId    Int
  token     String   @unique
  expiresAt DateTime
  usedAt    DateTime?
  user      User     @relation(fields: [userId], references: [id])
  createdAt DateTime @default(now())
}

model PasswordResetToken {
  id        Int      @id @default(autoincrement())
  userId    Int
  token     String   @unique
  expiresAt DateTime
  usedAt    DateTime?
  user      User     @relation(fields: [userId], references: [id])
  createdAt DateTime @default(now())
}

model RefreshToken {
  id           Int      @id @default(autoincrement())
  userId       Int
  hashedToken  String
  expiresAt    DateTime
  createdAt    DateTime @default(now())
  revokedAt    DateTime?
  user         User     @relation(fields: [userId], references: [id])
  @@index([userId])
}

model Course {
  id           Int        @id @default(autoincrement())
  title        String
  description  String
  category     String?
  createdById  Int
  createdBy    User       @relation("CourseCreator", fields: [createdById], references: [id])
  isPublished  Boolean    @default(false)
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt
  deletedAt    DateTime?
  modules      Module[]
  enrollments  Enrollment[]
}

model Module {
  id        Int       @id @default(autoincrement())
  courseId  Int
  title     String
  order     Int
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?
  course    Course    @relation(fields: [courseId], references: [id])
  videos    Video[]
  notes     Note[]
}

model Video {
  id             Int       @id @default(autoincrement())
  moduleId       Int
  title          String
  url            String
  durationSec    Int?
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt
  deletedAt      DateTime?
  module         Module    @relation(fields: [moduleId], references: [id])
  videoProgress  VideoProgress[]
}

model Note {
  id        Int       @id @default(autoincrement())
  moduleId  Int
  title     String
  url       String
  mimeType  String?
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?
  module    Module    @relation(fields: [moduleId], references: [id])
}

model Enrollment {
  id         Int       @id @default(autoincrement())
  userId     Int
  courseId   Int
  status     String    @default("active") // active|completed|cancelled
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt
  deletedAt  DateTime?
  user       User      @relation(fields: [userId], references: [id])
  course     Course    @relation(fields: [courseId], references: [id])
  @@unique([userId, courseId])
}

model VideoProgress {
  id          Int       @id @default(autoincrement())
  userId      Int
  videoId     Int
  watchedSec  Int       @default(0)
  percentage  Float     @default(0)
  updatedAt   DateTime  @updatedAt
  createdAt   DateTime  @default(now())
  user        User      @relation(fields: [userId], references: [id])
  video       Video     @relation(fields: [videoId], references: [id])
  @@unique([userId, videoId])
}

model Job {
  id          Int       @id @default(autoincrement())
  title       String
  description String
  location    String?
  type        String?   // full-time, part-time, contract
  category    String?
  isPublished Boolean   @default(true)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  deletedAt   DateTime?
  applications JobApplication[]
}

model JobApplication {
  id         Int       @id @default(autoincrement())
  userId     Int
  jobId      Int
  resumeUrl  String
  status     String    @default("submitted") // submitted|review|accepted|rejected
  note       String?
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt
  user       User      @relation(fields: [userId], references: [id])
  job        Job       @relation(fields: [jobId], references: [id])
  @@unique([userId, jobId])
}
